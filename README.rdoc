= Animoto API Client (Java)

The Animoto API Client is a Java library to communicate with the Animoto API. To learn more about the API, visit:

LINK_TO_ANIMOTO_API_HERE

== Requirements

The Animoto API Client requires Java 1.5. It is highly recommended that you have Maven 2.2 or greater installed as well since all of the builds and test scripts work off of Maven.

To download or learn more about Maven:

http://maven.apache.org

You must also have a valid Animoto Platform credential set to use the library.

== Build Commands

The project uses the basic Maven tasks: 

* mvn clean
* mvn compile
* mvn test
* mvn package

== Dependencies

The Animoto API Client uses the following libraries:

* Apache Commons Bean Utils (http://commons.apache.org/beanutils)
* Apache Http Client 4.x (http://hc.apache.org/httpcomponents-client)
* Google Gson (http://code.google.com/p/google-gson)

For testing, the following is used to verify JSON results:

* JSON Simple (http://code.google.com/p/json-simple)

All versions and dependencies are declared in the Maven project object model.

== Integration Tests

By default when you run tests, only the unit tests are run. If you want to run the integration test against the actual API services, then you can run the primary integration test as follows:

  mvn -Dtest=ApiClientIntegrationTest test

== Coding Examples

=== Directing 

This example shows you to create a Directing Job against the API in order to create a Storyboard.

  DirectingManifest directingManifest = new DirectingManifest();
  DirectingJob directingJob = null;
  Image image = new Image();
  TitleCard titleCard = new TitleCard();
  Footage footage = new Footage();
  Song song = new Song();

  // Provide a song.
  song.setSourceUrl("http://api.client.java.animoto.s3.amazonaws.com/test_assets/song.mp3");
  directingManifest.setSong(song);

  // Provide an image.
  image.setSourceUrl("http://api.client.java.animoto.s3.amazonaws.com/test_assets/image.jpg");
  directingManifest.addVisual(image);

  // Provide a title card.
  titleCard.setH1("hello");
  titleCard.setH2("world");
  directingManifest.addVisual(titleCard);

  // Provide a video.
  footage.setSourceUrl("http://api.client.java.animoto.s3.amazonaws.com/test_assets/footage.mp4");
  directingManifest.addVisual(footage);

  // Set the video title and producer name
  directingManifest.setTitle("My Animoto Video");
  directingManifest.setProducerName("Animoto");
 
  // Create a directing job. 
  directingJob = apiClient.direct(directingManifest);

  // Wait until it is completed or failed.
  while(directingJob.isPending()) {

    // You should probably sleep here before calling reload.
    apiClient.reload(directingJob);
  }

  if (directingJob.isComplete()) {
    // Now we have a storyboard!
    // Remember to reload the Storyboard if you want the metadata and link information.
    directingJob.getStoryboard();
  }

=== Rendering

Once you have a storyboard, you can then tell the API to create a render.

  RenderingJob renderingJob = null;
  RenderingManifest renderingManifest = new RenderingManifest();
  RenderingProfile renderingProfile = new RenderingProfile();

  // Setup our rendering profile.
  renderingProfile.setFramerate(new Float(30));
  renderingProfile.setFormat(Format.H264);
  renderingProfile.setVerticalResolution(VerticalResolution.VR_720P);

  // Set the storyboard from the Directing Job into the Rendering Manifest.
  renderingManifest.setRenderingProfile(renderingProfile);
  renderingManifest.setStoryboard(directingJob.getStoryboard());
  renderingJob = apiClient.render(renderingManifest);

  // Wait until it is completed or failed.
  while(renderingJob.isPending()) {

    // You should probably sleep here before calling reload.
    apiClient.reload(renderingJob);
  }

  if (renderingJob.isComplete()) {
    // Now we have a video!
    // Remember to reload the Video if you want the metadata and link information.
    renderingJob.getVideo();
  }

=== Storyboard

When you have a Storyboard object, you must query the API to get all the information related to the resource.

  // We have Storyboard location/URL but no information :(
  storyboard.getLocation();

  apiClient.reload(storyboard);

  // Now we have critical Storyboard links and metadata! :)
  storyboard.getLinks();
  storyboard.getMetadata();

=== Video

When you have a Video object, you must query the API to get all the information related to the resource.

  // We have a Video location/URL but no information :(
  video.getLocation();

  apiClient.reload(video);

  // Now we have critical Storyboard links and metadata! :)
  video.getLinks();
  video.getMetadata();
